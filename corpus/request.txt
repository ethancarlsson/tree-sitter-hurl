==================
HTTP method statements
==================

POST http://example.com

---

(entry
	(request
		(http_method)
		(url)
	)
)

==================
HTTPS method statements
==================

POST https://example.com

---

(entry
	(request
		(http_method)
		(url)
	)
)

==================
POST with empty JSON input
==================

POST https://example.com
{}


---

(entry
	(request
		(http_method)
		(url)
		(input
			(json)
		)
	)
)

==================
POST with full JSON input
==================

POST https://example.com
{
    "id": "4568",
    "evaluate": true
}

---

(entry
	(request
		(http_method)
		(url)
		(input
			(json)
		)
	)
)

==================
POST http 200 response status
==================

POST http://example.com
{
    "id": "4568",
    "evaluate": true
}

HTTP 200

---

(entry
	(request
		(http_method)
		(url)
		(input
			(json)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
)

==================
POST response with no version and status ERROR
==================

POST http://example.com
{
    "id": "4568",
    "evaluate": true
}

[Captures]

---

(entry
	(request
		(http_method)
		(url)
		(input
			(json)
		)
	)
	(ERROR
		(UNEXPECTED 'a')
		(key)
		(UNEXPECTED ']')
	)
)

==================
With comments
==================

# comment here
## and comment here
POST http://example.com

## and here
---

(entry
	(comment)
	(comment)
	(request
		(http_method)
		(url)
	)
	(comment)
)

==================
With header values
==================

POST http://example.com
User-Agent: test

---

(entry
	(request
		(http_method)
		(url)
		(key_value
			(key)
			(value)
		)
	)
)

==================
With header values (complex)
==================

POST http://example.com
User-Agent_2: test-22-(with-symbols)\and|_json_aftertest_ :;.,\/"'?!(){}[]@<>=-+*#$&`|~^%
{
	"test": true
}

---

(entry
	(request
		(http_method)
		(url)
		(key_value
			(key)
			(value)
		)
		(input
			(json)
		)
	)
)

==================
With query params, form params, multipart form params, cookies and auth
==================

GET http://example.com
[QueryStringParams]
order: newest
[BasicAuth]
bob: secret
[Cookies]
theme: light
[MultipartFormData]
field1: value1
[FormParams]
default: false
{
	"test": true
}

---

(entry
	(request
		(http_method)
		(url)
		(request_param_keyword)
		(key_value
			(key)
			(value)
		)
		(request_param_keyword)
		(key_value
			(key)
			(value)
		)
		(request_param_keyword)
		(key_value
			(key)
			(value)
		)
		(request_param_keyword)
		(key_value
			(key)
			(value)
		)
		(request_param_keyword)
		(key_value
			(key)
			(value)
		)
		(input
			(json)
		)
	)
)

==================
Variables
==================

GET http://localhost:3000/api/v1
[QueryStringParams]
query_param: {{custom-variable}}


---

(entry
	(request
		(http_method)
		(url)
		(request_param_keyword)
		(key_value
			(key)
			(value
				(variable)
			)
		)
	)
)

==================
Multiline string
==================

POST http://localhost:3000/api/v1
```
test
```

HTTP 200 # We add this to make sure the multiline string terminates

---

(entry
	(request
		(http_method)
		(url)
		(input
			(multiline_string)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
	(comment)
)

==================
Json with language hint
==================

POST http://localhost:3000/api/v1
```json
{
	"test": 123
}
```

HTTP 200 # We add this to make sure the multiline string terminates

---

(entry
	(request
		(http_method)
		(url)
		(input
			(json)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
	(comment)
)

==================
XML with language hint
==================

POST http://localhost:3000/api/v1
```xml
<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="http://example.net">
  <soap:Header></soap:Header>
  <soap:Body>
    <m:GetStockPrice>
      <m:StockName>GOOG</m:StockName>
    </m:GetStockPrice>
  </soap:Body>
</soap:Envelope>
```

HTTP 200 # We add this to make sure the multiline string terminates

---

(entry
	(request
		(http_method)
		(url)
		(input
			(xml)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
	(comment)
)

==================
Graphql with language hint
==================

POST https://example.org/starwars/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```

HTTP 200 # We add this to make sure the multiline string terminates

---

(entry
	(request
		(http_method)
		(url)
		(input
			(graphql)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
	(comment)
)

==================
Oneline string
==================

POST https://example.org/test
`test`

HTTP 200 # We add this to make sure the multiline string terminates

---

(entry
	(request
		(http_method)
		(url)
		(input
			(oneline_string)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
	(comment)
)

==================
Base64
==================

POST https://example.org/test
base64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZ
WxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0gaGVuZHJlcml0LCBlc3QganVzdG8gY
mliZW5kdW0gbWV0dXMsIG5lYyBydXRydW0gdG9ydG9yIG1hc3NhIGlkIG1ldHVzLiA=;

HTTP 200

---

(entry
	(request
		(http_method)
		(url)
		(input
			(oneline_base64)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
)

==================
Hex
==================

POST https://example.org/test
hex,636166c3a90a;


HTTP 200

---

(entry
	(request
		(http_method)
		(url)
		(input
			(oneline_hex)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
)

==================
File
==================

POST https://example.org/test
file,test.txt;


HTTP 200

---

(entry
	(request
		(http_method)
		(url)
		(input
			(filename (filename_text))
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
)

==================
File with escaped characters
==================

POST https://example.org/test
file,file\ with\;escaped\#chars.txt;


HTTP 200

---

(entry
	(request
		(http_method)
		(url)
		(input
			(filename
				(filename_text)
				(filename_escaped_char)
				(filename_text)
				(filename_escaped_char)
				(filename_text)
				(filename_escaped_char)
				(filename_text)
			)
		)
	)
	(response
		(version_and_status
			(http_version)
			(status)
		)
	)
)

